#include <stdio.h>
#include <string.h>

#define MAX_CIPHERTEXT_LENGTH 1000

// Function to decrypt the ciphertext using substitution
void decrypt(char *ciphertext, char *key, char *plaintext) {
    int i, j;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        char c = ciphertext[i];
        if (c >= '!' && c <= '~') {
            plaintext[i] = key[c - '!']; // Map the character using the key
        } else {
            plaintext[i] = c; // Preserve non-mapped characters
        }
    }
    plaintext[i] = '\0'; // Null-terminate the plaintext
}

int main() {
    char ciphertext[] = "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*;4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81(‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?";
    
    char key[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=[]{}|;:'\",.<>?/ `~"; // Substitute this with your decryption key
    char plaintext[MAX_CIPHERTEXT_LENGTH];
    
    decrypt(ciphertext, key, plaintext);

    printf("Ciphertext:\n%s\n", ciphertext);
    printf("Decrypted Plaintext:\n%s\n", plaintext);

    return 0;
}
